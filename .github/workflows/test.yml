name: Tests

# Trigger the workflow on push or pull request
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:

    # CI skip conditions
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Build matrix for different platforms
    strategy:
      matrix:
        os: [ubuntu-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check-out repository
      uses: actions/checkout@v2

    #- name: Set up access to private repos
    #  uses: webfactory/ssh-agent@v0.4.1
    #  with:
    #    ssh-private-key: ${{ secrets.GH_WEBFACTORY_KEY }}

    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
          python-version: 3.7

    - name: Some logging
      shell: bash
      run: |
        which python
        echo "pythonLocation: $pythonLocation"

    - name: Set up python packages manager
      uses: Gr1N/setup-poetry@v4

    - name: Create venv and install dependences
      run: poetry update

    - name: Run main.py
      run: pip install -r requirements.txt

    - name: setup apt dependencies
      run: |
        sudo apt-get update
        #        sudo add-apt-repository ppa:deadsnakes/ppa
        #        sudo apt-get install -y --no-install-recommends python${{ matrix.python-version }}-dev python${{ matrix.python-version }}-distutils
        #        PATH="/usr/local/bin:${PATH}"
        #        PYLOC=`which python${{ matrix.python-version }}`
        #        sudo ln -s $PYLOC /usr/local/bin/python3
        sudo apt-get install -y --no-install-recommends build-essential \
          gfortran cmake ccache \
          libgsl-dev libboost-all-dev libfftw3-dev libtiff5-dev libcerf-dev libeigen3-dev \
          qt5-default libqt5designercomponents5 qttools5-dev libqt5svg5-dev libqt5opengl5-dev libx11-xcb1
          
    - name: Install Python packages
      run: |
        python -m venv validate
        source validate/bin/activate
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools
        python -m pip install numpy scipy cython pytest

    # use ccache for building BornAgain, might save time
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files for BornAgain
      uses: actions/cache@v1.1.0
      with:
        path: .ccache
        key: bornagain-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          bornagain-ccache-

    - name: Build BornAgain
      env:
        CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
        CCACHE_COMPRESS: "true"
        CCACHE_COMPRESSLEVEL: "6"
        CCACHE_MAXSIZE: "400M"
        QT_QPA_PLATFORM: offscreen
      run: |
        git clone --single-branch --branch develop https://jugit.fz-juelich.de/mlz/bornagain.git
        pushd bornagain
        git submodule update
        mkdir build && pushd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPython3_EXECUTABLE=$pythonLocation/bin/python3 ../
        make package_source
        make -j4
        sudo make install
        # print statistics for ccache
        ccache -s
        cd $GITHUB_WORKSPACE
        sudo rm -rf BornAgain

    - name: Source BA
      run: |
        source /usr/local/bin/thisbornagain.sh

    - name: install pytest
      run: pip install pytest numpy
    
    - name: run pytest
      run: pytest tests/